<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:behaviors="clr-namespace:CommonUI.Behaviors"
	xmlns:mycontrols="clr-namespace:CommonUI.Controls"	
    xmlns:local="clr-namespace:CommonUI">

	
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="XamlImages.xaml" />
		<ResourceDictionary Source="XamlColors - WhiteBlue.xaml" />
	</ResourceDictionary.MergedDictionaries>
		
	
	
	
	
	<!-- ***************************************** Standard Controls ************************************** -->

		
	<!-- Groupbox with solid color header area -->	
	<Style TargetType="GroupBox">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="GroupBox">
					<Grid>
						<!--Grid Rows split the GroupBox into two areas -->
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>

						<!--Header area-->
						<Border Background="{StaticResource ControlNormalColor}" BorderBrush="{StaticResource ControlNormalColor}" 
								 BorderThickness="2,2,2,0" CornerRadius="2,2,0,0" >
							<ContentPresenter ContentSource="Header" RecognizesAccessKey="True" TextBlock.Foreground="{StaticResource ControlFontColor}" />
						</Border>

						<!-- Main client area -->
						<Border Grid.Row="1" BorderBrush="{StaticResource ControlNormalColor}" Background="{StaticResource ControlBackgroundColor}" 
								BorderThickness="2" CornerRadius="0,0,2,2" >
							<ContentPresenter Margin="4" />
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	
	
	<!-- Regular Button -->
	<Style TargetType="Button">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="{StaticResource ControlNormalColor}" />
		<Setter Property="Height" Value="30" />
		<Setter Property="ToolTipService.ShowDuration" Value="10000" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">

					<Border Background="{TemplateBinding Background}" BorderBrush="{StaticResource ControlBorderColor}" CornerRadius="2" BorderThickness="2">
						<TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Property=Content}" Foreground="{StaticResource ControlFontColor}" />
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource ControlHoverColor}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource ControlPressedColor}" />
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	

	
	<!-- Regular Textblock -->
	<Style TargetType="TextBlock">
		<Setter Property="Foreground" Value="{StaticResource ControlFontColor}" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Margin" Value="5" />
        <Setter Property="ToolTipService.ShowDuration" Value="10000" />
    </Style>


	
	
	<!-- Gradient for Indeterminate progress bar -->
	<LinearGradientBrush x:Key="ProgressBarIndeterminateBackgroundBrush" EndPoint="0,1" MappingMode="Absolute" SpreadMethod="Repeat" StartPoint="20,1" Opacity="0.8">
		<LinearGradientBrush.Transform>
			<TransformGroup>
				<TranslateTransform X="0" />
				<SkewTransform AngleX="-30" />
			</TransformGroup>
		</LinearGradientBrush.Transform>
		<GradientStop Color="{StaticResource ProgressBarColor1}" Offset="0.249" />
		<GradientStop Color="{StaticResource ProgressBarColor2}" Offset=".25" />
		<GradientStop Color="{StaticResource ProgressBarColor2}" Offset="0.75" />
		<GradientStop Color="{StaticResource ProgressBarColor1}" Offset="0.751" />
	</LinearGradientBrush>

	<!-- Progress Bar -->
	<Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}">
		<Setter Property="Foreground" Value="{StaticResource ControlHoverColor}" />
		<Setter Property="Background" Value="{StaticResource ControlNormalColor}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Height" Value="15" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">

					<Border BorderBrush="{StaticResource ControlBorderColor}" CornerRadius="2" BorderThickness="2">
						<Grid x:Name="TemplateRoot" SnapsToDevicePixels="true">
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Determinate" />
									<VisualState x:Name="Indeterminate">
										<Storyboard RepeatBehavior="Forever">
											<DoubleAnimation Duration="00:00:.5" From="0" To="20" 
													Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.Transform).(TransformGroup.Children)[0].X" 
													Storyboard.TargetName="IndeterminateGradientFill" />
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>

							<Border x:Name="ProgressBarTrack" BorderBrush="{TemplateBinding BorderBrush}" 
										BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />

							<Rectangle x:Name="PART_Track" Margin="{TemplateBinding BorderThickness}" />

							<Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="{TemplateBinding BorderThickness}">
								<Grid x:Name="Foreground">
									<Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
								</Grid>
							</Decorator>

							<Grid x:Name="IndeterminateRoot" Visibility="Collapsed">
								<Rectangle x:Name="IndeterminateSolidFill" Fill="{TemplateBinding Foreground}" Margin="{TemplateBinding BorderThickness}" 
										Opacity="1" RenderTransformOrigin="0.5,0.5" StrokeThickness="0" />
								<Rectangle x:Name="IndeterminateGradientFill" Fill="{StaticResource ProgressBarIndeterminateBackgroundBrush}" 
										Margin="{TemplateBinding BorderThickness}" StrokeThickness="1" />
							</Grid>
						</Grid>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="LayoutTransform" TargetName="TemplateRoot">
								<Setter.Value>
									<RotateTransform Angle="-90" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="true">
							<Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
							<Setter Property="Visibility" TargetName="IndeterminateRoot" Value="Visible" />
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="false">
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	

	<!-- ComboBox Toggle Button -->
	<Style  x:Key="ComboBoxToggleButtonTemplate" TargetType="ToggleButton">
		<Setter Property="Foreground" Value="{StaticResource ControlFontColor}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">

					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="20" />
						</Grid.ColumnDefinitions>

						<Border Grid.ColumnSpan="2" Name="Border" BorderBrush="{StaticResource ControlNormalColor}" 
								CornerRadius="0" BorderThickness="1" Background="{StaticResource ControlNormalColor}"/>

						<Border Grid.Column="1" Margin="1" BorderBrush="#444" Name="ButtonBorder" Background="{StaticResource ControlNormalColor}" />

						<Path Name="Arrow" Grid.Column="1" Data="M 0 0 L 3.5 4 L 7 0 Z" HorizontalAlignment="Center" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="UIElement.IsMouseOver" Value="True">
							<Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ControlHoverColor}"/>
						</Trigger>
						<Trigger Property="ToggleButton.IsChecked" Value="True">
							<Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ControlPressedColor}"/>
							<Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBox -->
	<Style TargetType="{x:Type ComboBox}">
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="TextElement.Foreground" Value="{StaticResource ControlFontColor}"/>
		<Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="10000" />
        <Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">

					<Border BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="2" CornerRadius="2">
						<Grid>
							<ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="False"
									IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
									Style="{StaticResource ComboBoxToggleButtonTemplate}"/>

							<ContentPresenter Name="ContentSite" Margin="5,0,22,0" IsHitTestVisible="False" HorizontalAlignment="Left" 
									VerticalAlignment="Center" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
									ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" 
									ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />

							<TextBox Name="PART_EditableTextBox" IsReadOnly="{TemplateBinding IsReadOnly}" Visibility="Hidden" 
									Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True" Foreground="{StaticResource ControlFontColor}" >
								<TextBox.Template >
									<ControlTemplate TargetType="TextBox" >
										<Border Name="PART_ContentHost" Focusable="False"/>
									</ControlTemplate>
								</TextBox.Template>
							</TextBox>

							<!-- Popup showing items -->
							<Popup Name="Popup" Placement="Relative" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide"
									   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" HorizontalOffset="-2" VerticalOffset="21">

								<Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
										MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" >

									<Border Name="DropDownBorder" Background="{StaticResource ControlNormalColor}" BorderBrush="{StaticResource ControlBorderColor}" 
											BorderThickness="2" CornerRadius="0,0,2,2"/>

									<ScrollViewer Margin="4" SnapsToDevicePixels="True">
										<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
									</ScrollViewer>

								</Grid>
							</Popup>
						</Grid>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="ItemsControl.HasItems" Value="False">
							<Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
						</Trigger>
						<Trigger Property="ItemsControl.IsGrouping" Value="True">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
						</Trigger>
						<Trigger Property="ComboBox.IsEditable" Value="True">
							<Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
							<Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
							<Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	
	
	
	<!-- Checkbox -->
	<Style x:Name="ImageCheckBox" TargetType="{x:Type mycontrols:ImageCheckBox}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Background" Value="{StaticResource ControlNormalColor}" />
        <Setter Property="ToolTipService.ShowDuration" Value="10000" />
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type mycontrols:ImageCheckBox}">


					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Border Background="{TemplateBinding Background}" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="2" CornerRadius="2">
								<Grid Name="CheckMark" Background="{StaticResource ResourceKey=tickIcon}" Height="12" Width="12" />
							</Border>
						</BulletDecorator.Bullet>

						<!-- Checkbox States -->
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity"
											Storyboard.TargetName="CheckMark" Duration="0:0:0.1" To="1" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked" >
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity"
											Storyboard.TargetName="CheckMark" Duration="0:0:0.1" To="0" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Indeterminate">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetProperty="Opacity"
											Storyboard.TargetName="CheckMark" Duration="0:0:0.1" To="0" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<ContentPresenter VerticalAlignment="Top" HorizontalAlignment="Left" RecognizesAccessKey="True"/>
					</BulletDecorator>


					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="False">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{StaticResource ControlHoverColor}"/>
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Background" Value="{StaticResource ControlPressedColor}"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- Radiobutton (looks like a checkbox) -->
	<Style x:Name="ImageRadioButton" TargetType="{x:Type mycontrols:ImageRadioButton}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Background" Value="{StaticResource ControlNormalColor}" />
        <Setter Property="ToolTipService.ShowDuration" Value="10000" />
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type mycontrols:ImageRadioButton}">
					
					<BulletDecorator>
						<BulletDecorator.Bullet>
							<Border Background="{TemplateBinding Background}" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="2" CornerRadius="2">
								<Grid Name="CheckMark" Background="{StaticResource ResourceKey=tickIcon}" Height="12" Width="12" />
							</Border>
						</BulletDecorator.Bullet>
						
						<TextBlock Margin="3,1,0,0" Foreground="#FF3E3E3E" FontFamily="Calibri" FontSize="12">
							<ContentPresenter />
						</TextBlock>
					</BulletDecorator>

					
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="False">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{StaticResource ControlHoverColor}"/>
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Background" Value="{StaticResource ControlPressedColor}"/>
						</Trigger>
					</ControlTemplate.Triggers>
					
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	
    <!-- Tab Control -->
    <Style TargetType="TabControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Border Grid.Row="0" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="2,2,2,0" HorizontalAlignment="Left" CornerRadius="2,2,0,0" >
                            <TabPanel Grid.Row="0" IsItemsHost="True" />
                        </Border>

                        <Border Grid.Row="1" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="2" Background="{StaticResource ControlBackgroundColor}" CornerRadius="0,2,2,2" >
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

    <!-- TabItem -->
	<Style TargetType="TabItem">
		<Setter Property="Margin" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabItem">

					<Grid Name="Panel" Background="Transparent">
						<Grid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="3" />
						</Grid.RowDefinitions>
						
						<ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" 
										  Margin="7,0,7,0" TextBlock.Foreground="{StaticResource ControlFontColor}"/>
						
						<Grid Name="TabMarker" Grid.Row="1" Margin="2,0,2,0" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="TabMarker" Property="Background" Value="{StaticResource TitleBarColor}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="False">
							<Setter TargetName="TabMarker" Property="Background" Value="{StaticResource ControlNormalColor}" />
						</Trigger>
						<!--<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="TabMarker" Property="Background" Value="{StaticResource ControlHoverColor}"/>
						</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	
	
	
	
	
	
	

	<!-- ***************************************** Custom Controls ************************************** -->

	<!-- TODO : put this one into the ui preview project -->
    <!-- Vertical Tab Control -->
    <Style x:Key="VerticalTabControl" TargetType="TabControl">
        <Setter Property="TabStripPlacement" Value="Left"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Border Grid.Column="0" BorderBrush="Transparent" BorderThickness="0" Background="{StaticResource ControlNormalColor}" HorizontalAlignment="Left">
                            <TabPanel Grid.Row="0" IsItemsHost="True" />
                        </Border>

                        <Border Grid.Column="1" BorderBrush="Transparent" BorderThickness="0" Background="{StaticResource ControlBackgroundColor}" CornerRadius="0,2,2,2" >
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- TabItem for Vertical Tab Control -->
    <Style x:Key="VerticalTabControlTabItem" TargetType="TabItem">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">

                    <Grid Name="Panel" Background="#00FF0000">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="3" />
                        </Grid.RowDefinitions>

                        <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" 
										  Margin="7,0,7,0" TextBlock.Foreground="{StaticResource ControlFontColor}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Panel" Property="Background" Value="{StaticResource ControlBackgroundColor}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Panel" Property="Background" Value="{StaticResource ControlNormalColor}" />
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="TabMarker" Property="Background" Value="{StaticResource ControlHoverColor}"/>
						</Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Editable Textbox - Textbox that looks like a label -->
	<!-- Usage : <TextBox Grid.Row="1" Width="150" Height="20" Style="{StaticResource EditableTextBox}">Click me to edit</TextBox> -->
	<Style x:Key="EditableTextBox" TargetType="TextBox">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />		
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />		
		<Setter Property="Foreground" Value="{StaticResource ControlFontColor}" />
        <Setter Property="ToolTipService.ShowDuration" Value="10000" />
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBoxBase">
					<Border x:Name="Border" Background="Transparent">
						<ScrollViewer Margin="0" x:Name="PART_ContentHost" />
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ControlPressedColor}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ControlBackgroundColor}"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	

	
	<!-- Title Bar Button -->
	<!-- Usage : <controls:ImageButton Grid.Column="2" ImageButtonSource="../Resources/minimise_normal.png" Command="{Binding minimiseCommand}" /> -->
	<Style TargetType="{x:Type mycontrols:ImageButton}">
		<Setter Property="Width" Value="25" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="{StaticResource TitleBarColor}" />
        <Setter Property="ToolTipService.ShowDuration" Value="10000" />
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type mycontrols:ImageButton}">

					<Border Background="{TemplateBinding Background}">
						<Image Height="12" Width="12" VerticalAlignment="Center" HorizontalAlignment="Center" Source="{TemplateBinding ImageButtonSource}" />
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource TitleBarButtonHoverColor}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource TitleBarButtonPressedColor}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	
	<!-- Drag/Drop Textbox -->
	<!-- Usage : <controls:TextBoxDragDrop Grid.Row="0" Width="150" Text="Im so Texbox" /> -->
	<Style TargetType="{x:Type mycontrols:TextBoxDragDrop}" BasedOn="{StaticResource {x:Type TextBox}}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="AllowDrop" Value="True" />
		<Setter Property="Background" Value="{StaticResource ControlNormalColor}" />
		<Setter Property="Foreground" Value="{StaticResource ControlFontColor}" />
		<Setter Property="Height" Value="25" />
		<Setter Property="Margin" Value="5" />
        <Setter Property="ToolTipService.ShowDuration" Value="10000" />
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">

					<Border Background="{TemplateBinding Background}" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="2" CornerRadius="2">
						<ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center"/>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{StaticResource ControlHoverColor}"/>
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Background" Value="{StaticResource ControlPressedColor}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



	<!-- ListBoxDragDrop -->
	<!-- Usage...
		<controls:ListBoxDragDrop Margin="5" Grid.Row="1" Grid.RowSpan="4" Grid.Column="2" >				
			<ListBox.ItemTemplate>
				<DataTemplate>
					<Border BorderBrush="Black" BorderThickness="1" Margin="2">
						<TextBlock Text="{Binding Path=text}" Margin="2"/>
					</Border>
				</DataTemplate>
			</ListBox.ItemTemplate>
		</controls:ListBoxDragDrop>
	-->
	<Style TargetType="{x:Type mycontrols:ListBoxDragDrop}">
		<Setter Property="mycontrols:ListBoxDragDrop.IsDragSource" Value="true" />
		<Setter Property="mycontrols:ListBoxDragDrop.IsDropTarget" Value="true" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBox">
					<Border Background="{StaticResource ControlBackgroundColor}" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="2" CornerRadius="2">
						<ScrollViewer>
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	
	

</ResourceDictionary>
